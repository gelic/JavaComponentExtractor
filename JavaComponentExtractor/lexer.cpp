#line 2 "lexer.cpp"
#line 4 "lexer.l"
    #pragma warning(disable: 4996)



#line 8 "lexer.cpp"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5
#define YY_FLEX_SUBMINOR_VERSION 39
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

/* C99 requires __STDC__ to be defined as 1. */
#if defined (__STDC__)

#define YY_USE_CONST

#endif	/* defined (__STDC__) */
#endif	/* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart(yyin  )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#define YY_BUF_SIZE 16384
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

extern yy_size_t yyleng;

extern FILE *yyin, *yyout;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    /* Note: We specifically omit the test for yy_rule_can_match_eol because it requires
     *       access to the local variable yy_act. Since yyless() is a macro, it would break
     *       existing scanners that call yyless() from OUTSIDE yylex. 
     *       One obvious solution it to make yy_act a global. I tried that, and saw
     *       a 5% performance hit in a non-yylineno scanner, because yy_act is
     *       normally declared as a register variable-- so it is not worth it.
     */
    #define  YY_LESS_LINENO(n) \
            do { \
                int yyl;\
                for ( yyl = n; yyl < yyleng; ++yyl )\
                    if ( yytext[yyl] == '\n' )\
                        --yylineno;\
            }while(0)
    #define YY_LINENO_REWIND_TO(dst) \
            do {\
                const char *p;\
                for ( p = yy_cp-1; p >= (dst); --p)\
                    if ( *p == '\n' )\
                        --yylineno;\
            }while(0)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, (yytext_ptr)  )

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	yy_size_t yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */
    
	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* Stack of input buffers. */
static size_t yy_buffer_stack_top = 0; /**< index of top of stack. */
static size_t yy_buffer_stack_max = 0; /**< capacity of stack. */
static YY_BUFFER_STATE * yy_buffer_stack = 0; /**< Stack as an array. */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

/* yy_hold_char holds the character lost when yytext is formed. */
static char yy_hold_char;
static yy_size_t yy_n_chars;		/* number of characters read into yy_ch_buf */
yy_size_t yyleng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = (char *) 0;
static int yy_init = 0;		/* whether we need to initialize */
static int yy_start = 0;	/* start state number */

/* Flag which is used to allow yywrap()'s to do buffer switches
 * instead of setting up a fresh yyin.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;

void yyrestart (FILE *input_file  );
void yy_switch_to_buffer (YY_BUFFER_STATE new_buffer  );
YY_BUFFER_STATE yy_create_buffer (FILE *file,int size  );
void yy_delete_buffer (YY_BUFFER_STATE b  );
void yy_flush_buffer (YY_BUFFER_STATE b  );
void yypush_buffer_state (YY_BUFFER_STATE new_buffer  );
void yypop_buffer_state (void );

static void yyensure_buffer_stack (void );
static void yy_load_buffer_state (void );
static void yy_init_buffer (YY_BUFFER_STATE b,FILE *file  );

#define YY_FLUSH_BUFFER yy_flush_buffer(YY_CURRENT_BUFFER )

YY_BUFFER_STATE yy_scan_buffer (char *base,yy_size_t size  );
YY_BUFFER_STATE yy_scan_string (yyconst char *yy_str  );
YY_BUFFER_STATE yy_scan_bytes (yyconst char *bytes,yy_size_t len  );

void *yyalloc (yy_size_t  );
void *yyrealloc (void *,yy_size_t  );
void yyfree (void *  );

#define yy_new_buffer yy_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer(yyin,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer(yyin,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

#define yywrap() 1
#define YY_SKIP_YYWRAP

typedef unsigned char YY_CHAR;

FILE *yyin = (FILE *) 0, *yyout = (FILE *) 0;

typedef int yy_state_type;

extern int yylineno;

int yylineno = 1;

extern char *yytext;
#define yytext_ptr yytext

static yy_state_type yy_get_previous_state (void );
static yy_state_type yy_try_NUL_trans (yy_state_type current_state  );
static int yy_get_next_buffer (void );
static void yy_fatal_error (yyconst char msg[]  );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
	yyleng = (size_t) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
	(yy_c_buf_p) = yy_cp;

#define YY_NUM_RULES 93
#define YY_END_OF_BUFFER 94
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static yyconst flex_int16_t yy_accept[368] =
    {   0,
        0,    0,   94,   76,   93,   90,   89,   87,   88,   86,
       91,    4,   93,    4,    4,   93,    3,    4,    4,    4,
        3,    4,   78,   77,    4,    4,    4,    4,   76,    3,
        4,   76,   76,   76,   76,   76,   76,   76,   76,   76,
       76,   76,   76,   76,   76,   76,    4,   76,   76,    9,
        0,   85,    0,   24,   11,   21,    0,    0,   19,   12,
       17,   13,   18,   81,    0,   92,   20,   80,   78,    0,
       83,   82,   78,    0,   77,   77,   15,    7,    6,    8,
       14,   76,    0,    0,    5,   23,   76,   76,   76,   76,
       76,   76,   76,   76,   76,   55,   76,   76,   76,   76,

       76,   76,   76,   74,   76,   76,   76,   76,   76,   76,
       76,   76,   76,   76,   76,   76,   76,   76,   76,   76,
       76,   76,   76,   22,   10,    0,    0,   84,    0,    0,
       81,   81,    0,    0,   92,   80,   80,   80,    0,   82,
       82,   79,   25,   26,   16,   76,    0,    0,   76,   76,
       76,   76,   76,   76,   76,   76,   76,   76,   76,   76,
       76,   76,   76,   76,   76,   66,   76,   76,   41,   76,
       76,   68,   76,   76,   76,   76,   76,   76,   76,   76,
       76,   76,   76,   76,   76,   76,   76,   61,   76,   76,
       76,    0,    0,    0,    0,    0,   81,   92,    0,   80,

       79,   79,   27,   76,    0,    0,    0,    0,   76,   76,
       76,   40,   62,   76,   46,   76,   76,   76,   76,   59,
       48,   76,   76,   76,   76,   76,   76,   76,   76,   44,
       76,   70,   76,   76,   76,   76,   76,   76,   76,   76,
       76,   76,   75,   76,   76,    1,   42,   76,   76,   76,
        0,    0,    0,    5,   76,   76,   58,   65,   54,   76,
       76,   76,   76,    2,   33,   43,   76,   76,   76,   76,
       76,   76,   76,   76,   76,   76,   45,   76,   69,   76,
       76,   56,   76,   76,   67,   47,    0,    0,   76,   76,
       76,   76,   39,   76,   76,   76,   51,   76,   76,   35,

       76,   76,   76,   29,   64,   36,   71,   76,   57,   76,
       76,    0,    0,    0,    0,   76,   38,   76,   73,   52,
       63,   76,   76,   76,   50,   30,   76,   76,   76,   76,
        0,    5,    0,    0,    0,    5,   28,   72,   76,   76,
       76,   76,   76,   76,   34,    0,    0,    0,    0,   76,
       76,   53,   31,   76,   32,    0,    0,    0,    0,    0,
        0,   49,   60,   76,   76,   37,    0
    } ;

static yyconst flex_int32_t yy_ec[256] =
    {   0,
        1,    2,    2,    2,    2,    2,    2,    3,    4,    5,
        2,    6,    7,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    8,    9,   10,    2,   11,   12,   13,   14,   15,
       15,   16,   17,   15,   18,   19,   20,   21,   22,   22,
       22,   23,   23,   23,   23,   24,   24,   25,   15,   26,
       27,   28,   25,    2,   29,   29,   29,   30,   31,   32,
       11,   11,   11,   11,   11,   33,   11,   11,   11,   11,
       11,   11,   34,   11,   11,   11,   11,   35,   11,   11,
       36,   37,   38,   39,   11,    2,   40,   41,   42,   43,

       44,   45,   46,   47,   48,   11,   49,   50,   51,   52,
       53,   54,   11,   55,   56,   57,   58,   59,   60,   61,
       62,   63,   15,   64,   15,   25,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,

        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2
    } ;

static yyconst flex_int32_t yy_meta[65] =
    {   0,
        1,    2,    2,    2,    3,    2,    2,    2,    2,    2,
        1,    2,    2,    4,    2,    2,    2,    2,    2,    2,
        5,    5,    5,    5,    2,    2,    2,    2,    5,    5,
        5,    5,    6,    1,    1,    2,    2,    2,    2,    5,
        5,    5,    5,    5,    5,    1,    1,    1,    1,    6,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    2
    } ;

static yyconst flex_int16_t yy_base[380] =
    {   0,
        0,    0,  941,  899,  942,  942,  942,  942,  942,  942,
      942,  912,   55,  911,   53,  900,  942,  909,   50,   51,
       49,   59,   74,  117,  942,   55,  908,   56,   33,  107,
      907,  892,   46,   81,   47,   92,  115,  125,   79,   85,
      117,  110,  132,  133,  111,  137,  119,  891,  890,  942,
       66,  942,  185,  942,  942,  942,  916,  233,  942,  942,
      942,  942,  942,  270,  913,    0,  942,  295,   33,  322,
      942,  351,  942,    0,    0,  942,  901,  942,  942,  942,
      154,   61,  197,   69,  942,  942,  130,  144,  152,  157,
      168,  170,  172,  175,  146,  174,  177,  178,  182,  179,

      193,  197,   82,  886,  187,  203,  205,  207,  208,  211,
      221,  224,  885,  210,  228,  235,  212,  232,  230,  248,
      246,  257,  258,  942,  942,  299,  327,  942,  309,  337,
      942,  380,  909,  904,    0,    0,  942,  409,  355,  363,
      942,  262,  942,  942,  896,  287,  906,  350,  306,  283,
      243,  347,  348,  269,  301,  349,  358,  321,  880,  370,
      118,  372,  366,  330,  377,  879,  387,  378,  380,  288,
      388,  878,  359,  393,  238,  402,  397,  403,  405,  407,
      409,  408,  414,  410,  404,  417,  426,  877,  339,  422,
      427,  461,  221,  458,  903,  452,  464,  942,  468,  478,

      445,  942,  942,  452,  900,  895,  498,  508,  465,  478,
      476,  873,  872,  477,  871,  485,  486,  489,  488,  870,
      869,  490,  491,  495,  492,  496,  498,  503,  507,  868,
      509,  832,  511,  514,  515,  516,  517,  519,  522,  520,
      524,  526,  821,  528,  530,  809,  808,  533,  536,  537,
      588,  594,  599,  574,  544,  569,  807,  804,  803,  564,
      562,  576,  546,  802,  572,  801,  570,  566,  577,  583,
      586,  590,  584,  592,  596,  594,  800,  598,  798,  601,
      602,  603,  604,  606,  797,  796,  644,  648,  620,  615,
      617,  609,  795,  622,  623,  624,  794,  628,  631,  792,

      632,  633,  638,  791,  790,  788,  786,  639,  785,  640,
      641,  681,  695,  701,  705,  672,  784,  646,  782,  779,
      776,  642,  652,  677,  762,  760,  679,  675,  683,  687,
      706,  781,  737,  743,  749,  755,  743,  732,  673,  711,
      693,  695,  720,  717,  726,  750,  771,  772,  775,  742,
      744,  714,  691,  731,  648,  566,  770,  788,  802,  808,
      814,  456,  379,  755,  759,  180,  942,  846,  852,  858,
      864,  870,  125,  872,  878,  884,  890,  896,  902
    } ;

static yyconst flex_int16_t yy_def[380] =
    {   0,
      367,    1,  367,  368,  367,  367,  367,  367,  367,  367,
      367,  367,  369,  367,  367,  370,  367,  367,  367,  367,
      367,  367,  367,  367,  367,  367,  367,  367,  368,  367,
      367,  368,  368,  368,  368,  368,  368,  368,  368,  368,
      368,  368,  368,  368,  368,  368,  367,  368,  368,  367,
      369,  367,  367,  367,  367,  367,  367,  367,  367,  367,
      367,  367,  367,  367,  371,  372,  367,  367,   23,  367,
      367,  367,  367,  373,   24,  367,  367,  367,  367,  367,
      367,  368,  367,  367,  367,  367,  368,  368,  368,  368,
      368,  368,  368,  368,  368,  368,  368,  368,  368,  368,

      368,  368,  368,  368,  368,  368,  368,  368,  368,  368,
      368,  368,  368,  368,  368,  368,  368,  368,  368,  368,
      368,  368,  368,  367,  367,  369,  369,  367,  367,  367,
      367,  367,  371,  371,  372,   68,  367,  367,  367,  367,
      367,  374,  367,  367,  367,  368,  375,  376,  368,  368,
      368,  368,  368,  368,  368,  368,  368,  368,  368,  368,
      368,  368,  368,  368,  368,  368,  368,  368,  368,  368,
      368,  368,  368,  368,  368,  368,  368,  368,  368,  368,
      368,  368,  368,  368,  368,  368,  368,  368,  368,  368,
      368,  369,  369,  367,  367,  367,  367,  367,  367,  367,

      374,  367,  367,  368,  375,  375,  376,  376,  368,  368,
      368,  368,  368,  368,  368,  368,  368,  368,  368,  368,
      368,  368,  368,  368,  368,  368,  368,  368,  368,  368,
      368,  368,  368,  368,  368,  368,  368,  368,  368,  368,
      368,  368,  368,  368,  368,  368,  368,  368,  368,  368,
      367,  376,  376,  376,  368,  368,  368,  368,  368,  368,
      368,  368,  368,  368,  368,  368,  368,  368,  368,  368,
      368,  368,  368,  368,  368,  368,  368,  368,  368,  368,
      368,  368,  368,  368,  368,  368,  377,  376,  368,  368,
      368,  368,  368,  368,  368,  368,  368,  368,  368,  368,

      368,  368,  368,  368,  368,  368,  368,  368,  368,  368,
      368,  377,  375,  377,  377,  368,  368,  368,  368,  368,
      368,  368,  368,  368,  368,  368,  368,  368,  368,  368,
      375,  375,  375,  377,  377,  377,  368,  368,  368,  368,
      368,  368,  368,  368,  368,  378,  377,  379,  377,  368,
      368,  368,  368,  368,  368,  375,  378,  377,  375,  377,
      379,  368,  368,  368,  368,  368,    0,  367,  367,  367,
      367,  367,  367,  367,  367,  367,  367,  367,  367
    } ;

static yyconst flex_int16_t yy_nxt[1007] =
    {   0,
        4,    5,    6,    7,    8,    9,   10,   11,   12,   13,
        4,   14,   15,   16,   17,   18,   19,   20,   21,   22,
       23,   24,   24,   24,   25,   26,   27,   28,    4,    4,
        4,    4,    4,   29,    4,   30,    5,   17,   31,   32,
       33,   34,   35,   36,   37,    4,    4,   38,    4,   39,
        4,   40,    4,   41,   42,   43,   44,    4,   45,   46,
        4,    4,    4,   47,   52,   55,   60,  367,   62,   64,
       64,   64,   64,   49,   65,   52,   61,   63,   66,   56,
       77,   78,   80,   81,  147,   67,   49,   49,  148,   82,
       95,   53,   68,  367,   69,   69,   69,   70,   88,   96,

       89,   49,   53,   71,   72,   71,   73,   90,   74,   83,
       83,   83,   83,   83,   83,  146,   71,   72,   71,   49,
       91,   49,   49,   73,  108,   49,   84,   92,  109,  142,
       93,  107,   49,   94,   74,   68,  166,   75,   75,   75,
       75,   97,  110,   98,   85,  124,   71,   72,   71,   76,
       49,   49,   99,  114,  100,   49,  111,   49,   49,   71,
       72,   71,  101,  122,  102,   49,   76,  103,  221,  104,
       49,  112,   49,   49,  113,  105,  106,   49,  115,  120,
      144,  145,  125,  123,   49,  149,   49,  121,  116,  117,
      158,  118,   49,  119,   51,  151,  150,   49,   51,   83,

       83,   83,   83,   83,   83,  126,  126,  127,   49,  155,
       49,  156,   49,  152,   49,   49,   84,   49,   49,   49,
       49,   51,   49,  153,  154,   51,  157,   49,  163,   51,
       52,  159,  160,   49,   85,  161,   51,   49,  162,   51,
      167,   51,   57,   49,  164,   49,   57,   49,   49,  165,
       49,   49,   49,  129,  129,  130,  170,   53,  168,  169,
      173,   49,  174,  171,   49,  181,  178,  172,   49,   57,
       49,  175,   49,   57,  180,   49,  176,   57,   49,  182,
      179,  183,  211,   49,   57,  186,   49,   57,   49,   57,
       64,   64,   64,   64,  202,  184,  234,   49,   49,  131,

      132,  131,  185,  187,  189,  191,  190,  188,   52,   49,
      214,  202,  131,  132,  131,  136,  136,  136,  136,  192,
      192,  192,  128,   49,  137,  138,  137,   49,   49,  194,
      194,  194,  210,  230,  204,   53,   52,  137,  138,  137,
       68,   49,   70,   70,   70,   70,   49,  193,  193,  193,
      128,   71,   72,   71,   83,  215,  208,  195,  195,  195,
      218,   49,  209,   53,   71,   72,   71,  139,  139,  224,
       49,  140,  140,  140,  140,  140,  140,  140,  140,   49,
      141,  247,  141,  140,  140,  140,  140,   49,   49,   49,
      212,  213,  141,  141,  141,  141,  196,  196,   49,   49,

      197,  197,  197,  197,  216,  141,   49,  141,  232,  131,
       49,  131,   49,  220,  217,  222,  225,   49,   49,   49,
       49,  223,  131,  229,  131,  199,  199,   49,   49,  200,
      200,  200,  200,   49,  228,  231,  226,   49,  137,  227,
      137,  233,   49,   49,   49,   49,  236,   49,   49,   49,
       49,  137,  240,  137,   49,  242,  244,   49,  235,  238,
      237,  248,   49,  239,  241,  243,   49,   49,  245,  246,
       52,  128,  197,  197,  197,  197,  249,  202,  195,  195,
      195,  193,  193,  193,  197,  197,  197,  197,  200,  200,
      200,  200,   49,  131,  202,  131,   49,   53,  200,  200,

      200,  200,   83,  250,  208,   49,  131,  137,  131,  137,
      208,  208,  251,  208,  252,  208,   49,   49,   49,  255,
      137,  256,  137,  258,  257,   49,   49,  253,   49,   49,
       49,   49,   49,  260,  264,   49,   49,  262,   49,  267,
      259,  263,  269,   49,  265,  254,  261,   49,  266,   49,
      272,   49,  268,  273,   49,   49,   49,   49,  274,   49,
       49,  270,   49,  275,   49,  280,   49,  271,   49,  278,
       49,  276,  281,   49,  279,  277,   49,   49,   83,  285,
      208,  206,  286,  289,   49,  283,   49,  282,  294,  284,
       83,   83,   83,   83,   83,   83,  208,  208,  251,  208,

      252,  208,   49,   83,   49,  208,   49,   84,  290,   49,
       49,  292,   49,  253,  287,  291,   49,   49,  288,  293,
      296,  295,  297,   49,   49,   85,   49,  299,  298,  300,
       49,  254,   49,  303,   49,  301,   49,  304,   49,  306,
      302,   49,   49,   49,   49,  305,   49,  307,  313,   49,
      314,  310,   83,  311,  208,   49,  308,   49,  309,  315,
       49,  316,   49,   49,   49,  319,  317,  322,   49,  323,
      324,   49,   49,   49,  318,  325,  326,  320,   49,   49,
       49,   49,   49,  329,  321,  313,   49,  314,   49,  338,
      330,  328,   49,  339,  327,  340,  315,  313,  313,  313,

      313,  313,  313,  314,  314,  333,  314,  334,  314,  313,
      206,  314,   49,   49,  331,   49,  315,   49,  341,   49,
      335,  346,  342,   49,  208,  347,  343,   49,  337,  350,
      345,   49,  332,   49,  344,   49,  352,  353,  336,  313,
      313,  313,  313,  313,  313,  314,  314,  333,  314,  334,
      314,   49,  206,  313,   49,  314,  331,   49,  315,  313,
       49,  314,  335,  351,  348,  357,   49,  354,  349,  313,
      315,   49,   49,  355,  332,  313,  359,  314,  360,  313,
      336,  314,   49,   49,   49,  357,  315,  361,  363,  313,
      315,  314,  313,  364,  314,   49,  206,  362,  365,   49,

       49,  366,   49,  315,  313,  313,  313,  313,  313,  313,
      314,  314,  333,  314,  334,  314,   49,  206,  359,   49,
      360,  331,   49,  315,   49,   49,   49,  335,   49,  361,
       49,   49,   49,  314,   49,   49,   49,   49,   49,  332,
       49,   49,   49,   49,   49,  336,   48,   49,   49,   49,
       48,   48,   51,   51,   51,   51,   51,   51,   57,   57,
       57,   49,   57,   57,  133,  133,  133,  133,  133,  133,
      135,  135,   49,  135,  135,  135,  201,  201,  205,  205,
      205,  205,  205,  205,  207,  207,  207,  207,  207,  207,
      312,  312,  312,  312,  312,  312,  356,  356,  356,  356,

      356,  356,  358,  358,  358,  358,  358,  358,   49,   49,
       49,   49,   49,   49,   83,  206,  128,   49,   49,   49,
      219,  206,  203,  198,  134,  177,   49,  143,  134,  128,
       49,   49,   87,   86,   79,   59,   58,   54,   50,   49,
      367,    3,  367,  367,  367,  367,  367,  367,  367,  367,
      367,  367,  367,  367,  367,  367,  367,  367,  367,  367,
      367,  367,  367,  367,  367,  367,  367,  367,  367,  367,
      367,  367,  367,  367,  367,  367,  367,  367,  367,  367,
      367,  367,  367,  367,  367,  367,  367,  367,  367,  367,
      367,  367,  367,  367,  367,  367,  367,  367,  367,  367,

      367,  367,  367,  367,  367,  367
    } ;

static yyconst flex_int16_t yy_chk[1007] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,   13,   15,   19,   69,   20,   21,
       21,   21,   21,   29,   22,   51,   19,   20,   22,   15,
       26,   26,   28,   28,   84,   22,   33,   35,   84,   29,
       35,   13,   23,   69,   23,   23,   23,   23,   33,   35,

       33,   82,   51,   23,   23,   23,   23,   33,   23,   30,
       30,   30,   30,   30,   30,   82,   23,   23,   23,   39,
       34,   34,  103,   23,   40,   40,   30,   34,   40,  373,
       34,   39,   36,   34,   23,   24,  103,   24,   24,   24,
       24,   36,   40,   36,   30,   47,   24,   24,   24,   24,
       42,   45,   36,   42,   37,   37,   41,   41,  161,   24,
       24,   24,   37,   45,   37,   38,   24,   37,  161,   38,
       87,   41,   43,   44,   41,   38,   38,   46,   43,   44,
       81,   81,   47,   46,   88,   87,   95,   44,   43,   43,
       95,   43,   89,   43,   53,   89,   88,   90,   53,   83,

       83,   83,   83,   83,   83,   53,   53,   53,   91,   92,
       92,   93,   93,   90,   96,   94,   83,   97,   98,  100,
      366,   53,   99,   91,   91,   53,   94,  105,  100,   53,
      193,   96,   97,  101,   83,   98,   53,  102,   99,   53,
      105,   53,   58,  106,  101,  107,   58,  108,  109,  102,
      114,  110,  117,   58,   58,   58,  107,  193,  106,  106,
      110,  111,  111,  108,  112,  117,  114,  109,  115,   58,
      119,  112,  118,   58,  116,  116,  112,   58,  175,  118,
      115,  119,  151,  151,   58,  121,  121,   58,  120,   58,
       64,   64,   64,   64,  142,  120,  175,  122,  123,   64,

       64,   64,  120,  121,  122,  123,  122,  121,  126,  154,
      154,  142,   64,   64,   64,   68,   68,   68,   68,  126,
      126,  126,  129,  150,   68,   68,   68,  146,  170,  129,
      129,  129,  150,  170,  146,  126,  127,   68,   68,   68,
       70,  155,   70,   70,   70,   70,  149,  127,  127,  127,
      130,   70,   70,   70,  148,  155,  148,  130,  130,  130,
      158,  158,  149,  127,   70,   70,   70,   72,   72,  164,
      164,   72,   72,   72,   72,  139,  139,  139,  139,  189,
       72,  189,   72,  140,  140,  140,  140,  152,  153,  156,
      152,  153,  140,   72,  140,   72,  132,  132,  157,  173,

      132,  132,  132,  132,  156,  140,  163,  140,  173,  132,
      160,  132,  162,  160,  157,  162,  165,  165,  168,  363,
      169,  163,  132,  169,  132,  138,  138,  167,  171,  138,
      138,  138,  138,  174,  168,  171,  167,  177,  138,  167,
      138,  174,  176,  178,  185,  179,  177,  180,  182,  181,
      184,  138,  181,  138,  183,  183,  185,  186,  176,  179,
      178,  190,  190,  180,  182,  184,  187,  191,  186,  187,
      192,  194,  196,  196,  196,  196,  191,  201,  194,  194,
      194,  192,  192,  192,  197,  197,  197,  197,  199,  199,
      199,  199,  204,  197,  201,  197,  362,  192,  200,  200,

      200,  200,  207,  204,  207,  209,  197,  200,  197,  200,
      208,  208,  208,  208,  208,  208,  211,  214,  210,  209,
      200,  210,  200,  214,  211,  216,  217,  208,  219,  218,
      222,  223,  225,  217,  223,  224,  226,  219,  227,  226,
      216,  222,  228,  228,  224,  208,  218,  229,  225,  231,
      233,  233,  227,  234,  234,  235,  236,  237,  235,  238,
      240,  229,  239,  236,  241,  241,  242,  231,  244,  239,
      245,  237,  242,  248,  240,  238,  249,  250,  254,  249,
      254,  356,  250,  255,  255,  245,  263,  244,  263,  248,
      251,  251,  251,  251,  251,  251,  252,  252,  252,  252,

      252,  252,  261,  253,  260,  253,  268,  251,  256,  256,
      267,  261,  265,  252,  253,  260,  262,  269,  253,  262,
      267,  265,  268,  270,  273,  251,  271,  270,  269,  271,
      272,  252,  274,  274,  276,  272,  275,  275,  278,  278,
      273,  280,  281,  282,  283,  276,  284,  280,  287,  292,
      287,  283,  288,  284,  288,  290,  281,  291,  282,  287,
      289,  289,  294,  295,  296,  292,  290,  296,  298,  298,
      299,  299,  301,  302,  291,  301,  302,  294,  303,  308,
      310,  311,  322,  310,  295,  312,  318,  312,  355,  318,
      311,  308,  323,  322,  303,  323,  312,  313,  313,  313,

      313,  313,  313,  314,  314,  314,  314,  314,  314,  315,
      313,  315,  316,  339,  313,  328,  314,  324,  324,  327,
      314,  331,  327,  329,  315,  331,  328,  330,  316,  339,
      330,  353,  313,  341,  329,  342,  341,  342,  314,  333,
      333,  333,  333,  333,  333,  334,  334,  334,  334,  334,
      334,  340,  333,  335,  352,  335,  333,  344,  334,  336,
      343,  336,  334,  340,  335,  346,  345,  343,  335,  346,
      336,  354,  338,  344,  333,  347,  348,  347,  348,  349,
      334,  349,  350,  337,  351,  357,  347,  348,  351,  357,
      349,  348,  358,  354,  358,  364,  332,  350,  364,  365,

      326,  365,  325,  358,  359,  359,  359,  359,  359,  359,
      360,  360,  360,  360,  360,  360,  321,  359,  361,  320,
      361,  359,  319,  360,  317,  309,  307,  360,  306,  361,
      305,  304,  300,  361,  297,  293,  286,  285,  279,  359,
      277,  266,  264,  259,  258,  360,  368,  257,  247,  246,
      368,  368,  369,  369,  369,  369,  369,  369,  370,  370,
      370,  243,  370,  370,  371,  371,  371,  371,  371,  371,
      372,  372,  232,  372,  372,  372,  374,  374,  375,  375,
      375,  375,  375,  375,  376,  376,  376,  376,  376,  376,
      377,  377,  377,  377,  377,  377,  378,  378,  378,  378,

      378,  378,  379,  379,  379,  379,  379,  379,  230,  221,
      220,  215,  213,  212,  206,  205,  195,  188,  172,  166,
      159,  147,  145,  134,  133,  113,  104,   77,   65,   57,
       49,   48,   32,   31,   27,   18,   16,   14,   12,    4,
        3,  367,  367,  367,  367,  367,  367,  367,  367,  367,
      367,  367,  367,  367,  367,  367,  367,  367,  367,  367,
      367,  367,  367,  367,  367,  367,  367,  367,  367,  367,
      367,  367,  367,  367,  367,  367,  367,  367,  367,  367,
      367,  367,  367,  367,  367,  367,  367,  367,  367,  367,
      367,  367,  367,  367,  367,  367,  367,  367,  367,  367,

      367,  367,  367,  367,  367,  367
    } ;

/* Table of booleans, true if rule could match eol. */
static yyconst flex_int32_t yy_rule_can_match_eol[94] =
    {   0,
0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0,     };

static yy_state_type yy_last_accepting_state;
static char *yy_last_accepting_cpos;

extern int yy_flex_debug;
int yy_flex_debug = 0;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
char *yytext;
#line 1 "lexer.l"

#line 8 "lexer.l"
    #include "unistd.h"
    #include "parser.hpp"

    int yycolumn = 1;
    char *filename;

    #define YY_USER_ACTION \
        yylloc.filename = filename; \
        yylloc.first_line = yylloc.last_line = yylineno; \
        yylloc.first_column = yycolumn; \
        yylloc.last_column = yycolumn + yyleng - 1; \
        yycolumn += yyleng;

    void yyerror(const char *msg)
    {
        printf("%s:%d.%d: %s\n", yylloc.filename, yylloc.first_line, yylloc.first_column, msg);
    }
/***************************************************************/
#line 852 "lexer.cpp"

#define INITIAL 0

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

static int yy_init_globals (void );

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int yylex_destroy (void );

int yyget_debug (void );

void yyset_debug (int debug_flag  );

YY_EXTRA_TYPE yyget_extra (void );

void yyset_extra (YY_EXTRA_TYPE user_defined  );

FILE *yyget_in (void );

void yyset_in  (FILE * in_str  );

FILE *yyget_out (void );

void yyset_out  (FILE * out_str  );

yy_size_t yyget_leng (void );

char *yyget_text (void );

int yyget_lineno (void );

void yyset_lineno (int line_number  );

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap (void );
#else
extern int yywrap (void );
#endif
#endif

    static void yyunput (int c,char *buf_ptr  );
    
#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * );
#endif

#ifndef YY_NO_INPUT

#ifdef __cplusplus
static int yyinput (void );
#else
static int input (void );
#endif

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 8192
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO do { if (fwrite( yytext, yyleng, 1, yyout )) {} } while (0)
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		size_t n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = fread(buf, 1, max_size, yyin))==0 && ferror(yyin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(yyin); \
			} \
		}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int yylex (void);

#define YY_DECL int yylex (void)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;
    
	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer(yyin,YY_BUF_SIZE );
		}

		yy_load_buffer_state( );
		}

	{
#line 90 "lexer.l"

#line 1063 "lexer.cpp"

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = (yy_c_buf_p);

		/* Support of yytext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = (yy_start);
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)] ;
			if ( yy_accept[yy_current_state] )
				{
				(yy_last_accepting_state) = yy_current_state;
				(yy_last_accepting_cpos) = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 368 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_current_state != 367 );
		yy_cp = (yy_last_accepting_cpos);
		yy_current_state = (yy_last_accepting_state);

yy_find_action:
		yy_act = yy_accept[yy_current_state];

		YY_DO_BEFORE_ACTION;

		if ( yy_act != YY_END_OF_BUFFER && yy_rule_can_match_eol[yy_act] )
			{
			yy_size_t yyl;
			for ( yyl = 0; yyl < yyleng; ++yyl )
				if ( yytext[yyl] == '\n' )
					   
    yylineno++;
;
			}

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = (yy_hold_char);
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			goto yy_find_action;

case 1:
YY_RULE_SETUP
#line 91 "lexer.l"
{return BOOLLIT;}
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 92 "lexer.l"
{return BOOLLIT;}
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 94 "lexer.l"
{return yytext[0];}
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 95 "lexer.l"
{return yytext[0];}
	YY_BREAK
case 5:
/* rule 5 can match eol */
YY_RULE_SETUP
#line 96 "lexer.l"
{yylval.str = new QString(yytext); return OP_DIM;}
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 98 "lexer.l"
{return OP_EQ;}
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 99 "lexer.l"
{return OP_LE;}
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 100 "lexer.l"
{return OP_GE;}
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 101 "lexer.l"
{return OP_NE;}
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 102 "lexer.l"
{return OP_LOR;}
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 103 "lexer.l"
{return OP_LAND;}
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 104 "lexer.l"
{return OP_INC;}
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 105 "lexer.l"
{return OP_DEC;}
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 106 "lexer.l"
{return OP_SHR;}
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 107 "lexer.l"
{return OP_SHL;}
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 108 "lexer.l"
{return OP_SHRR;}
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 109 "lexer.l"
{return ASS_ADD;}
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 110 "lexer.l"
{return ASS_SUB;}
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 111 "lexer.l"
{return ASS_MUL;}
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 112 "lexer.l"
{return ASS_DIV;}
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 113 "lexer.l"
{return ASS_AND;}
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 114 "lexer.l"
{return ASS_OR;}
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 115 "lexer.l"
{return ASS_XOR;}
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 116 "lexer.l"
{return ASS_MOD;}
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 117 "lexer.l"
{return ASS_SHL;}
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 118 "lexer.l"
{return ASS_SHR;}
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 119 "lexer.l"
{return ASS_SHRR;}
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 121 "lexer.l"
{yylval.str = new QString(yytext); return ABSTRACT;}
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 122 "lexer.l"
{yylval.str = new QString(yytext); return PUBLIC;}
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 123 "lexer.l"
{yylval.str = new QString(yytext); return PRIVATE;}
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 124 "lexer.l"
{yylval.str = new QString(yytext); return PROTECTED;}
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 125 "lexer.l"
{yylval.str = new QString(yytext); return TRANSIENT;}
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 126 "lexer.l"
{yylval.str = new QString(yytext); return FINAL;}
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 127 "lexer.l"
{yylval.str = new QString(yytext); return VOLATILE;}
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 128 "lexer.l"
{yylval.str = new QString(yytext); return NATIVE;}
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 129 "lexer.l"
{yylval.str = new QString(yytext); return STATIC;}
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 130 "lexer.l"
{yylval.str = new QString(yytext); return SYNCHRONIZED;}
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 132 "lexer.l"
{yylval.str = new QString(yytext); return YYBOOLEAN;}
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 133 "lexer.l"
{yylval.str = new QString(yytext); return YYDOUBLE;}
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 134 "lexer.l"
{yylval.str = new QString(yytext); return YYBYTE;}
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 135 "lexer.l"
{yylval.str = new QString(yytext); return YYINT;}
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 136 "lexer.l"
{yylval.str = new QString(yytext); return YYVOID;}
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 137 "lexer.l"
{yylval.str = new QString(yytext); return YYFLOAT;}
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 138 "lexer.l"
{yylval.str = new QString(yytext); return YYLONG;}
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 139 "lexer.l"
{yylval.str = new QString(yytext); return YYSHORT;}
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 140 "lexer.l"
{yylval.str = new QString(yytext); return YYCHAR;}
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 141 "lexer.l"
{yylval.str = new QString(yytext); return YYSTRING;}
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 143 "lexer.l"
{return ENUM;}
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 144 "lexer.l"
{return IMPLEMENTS;}
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 145 "lexer.l"
{return PACKAGE;}
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 146 "lexer.l"
{return IMPORT;}
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 147 "lexer.l"
{return EXTENDS;}
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 148 "lexer.l"
{return INTERFACE;}
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 149 "lexer.l"
{return CLASS;}
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 151 "lexer.l"
{return DO;}
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 152 "lexer.l"
{return THROW;}
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 153 "lexer.l"
{return THROWS;}
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 154 "lexer.l"
{return BREAK;}
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 155 "lexer.l"
{return ELSE;}
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 156 "lexer.l"
{return INSTANCEOF;}
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 157 "lexer.l"
{return TRY;}
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 158 "lexer.l"
{return CASE;}
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 159 "lexer.l"
{return FINALLY;}
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 160 "lexer.l"
{return RETURN;}
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 161 "lexer.l"
{return CATCH;}
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 162 "lexer.l"
{return FOR;}
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 163 "lexer.l"
{return WHILE;}
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 164 "lexer.l"
{return NEW;}
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 165 "lexer.l"
{return SUPER;}
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 166 "lexer.l"
{return JNULL;}
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 167 "lexer.l"
{return SWITCH;}
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 168 "lexer.l"
{return CONTINUE;}
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 169 "lexer.l"
{return DEFAULT;}
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 170 "lexer.l"
{return IF;}
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 171 "lexer.l"
{return THIS;}
	YY_BREAK
case 76:
YY_RULE_SETUP
#line 173 "lexer.l"
{yylval.str = new QString(yytext); return IDENTIFIER;}
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 175 "lexer.l"
{return LITERAL;}
	YY_BREAK
case 78:
YY_RULE_SETUP
#line 176 "lexer.l"
{return LITERAL;}
	YY_BREAK
case 79:
YY_RULE_SETUP
#line 177 "lexer.l"
{return LITERAL;}
	YY_BREAK
case 80:
YY_RULE_SETUP
#line 179 "lexer.l"
{return LITERAL;}
	YY_BREAK
case 81:
YY_RULE_SETUP
#line 180 "lexer.l"
{return LITERAL;}
	YY_BREAK
case 82:
YY_RULE_SETUP
#line 181 "lexer.l"
{return LITERAL;}
	YY_BREAK
case 83:
YY_RULE_SETUP
#line 182 "lexer.l"
{return LITERAL;}
	YY_BREAK
case 84:
/* rule 84 can match eol */
YY_RULE_SETUP
#line 184 "lexer.l"
{return LITERAL;}
	YY_BREAK
case 85:
/* rule 85 can match eol */
YY_RULE_SETUP
#line 185 "lexer.l"
{return LITERAL;}
	YY_BREAK
case 86:
YY_RULE_SETUP
#line 187 "lexer.l"
{}
	YY_BREAK
case 87:
/* rule 87 can match eol */
YY_RULE_SETUP
#line 188 "lexer.l"
{yycolumn = 1;}
	YY_BREAK
case 88:
YY_RULE_SETUP
#line 189 "lexer.l"
{}
	YY_BREAK
case 89:
YY_RULE_SETUP
#line 190 "lexer.l"
{}
	YY_BREAK
case 90:
YY_RULE_SETUP
#line 191 "lexer.l"
{}
	YY_BREAK
case 91:
YY_RULE_SETUP
#line 192 "lexer.l"
{}
	YY_BREAK
case 92:
/* rule 92 can match eol */
YY_RULE_SETUP
#line 194 "lexer.l"
{}
	YY_BREAK
case 93:
YY_RULE_SETUP
#line 195 "lexer.l"
ECHO;
	YY_BREAK
#line 1596 "lexer.cpp"
case YY_STATE_EOF(INITIAL):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = (yy_last_accepting_cpos);
				yy_current_state = (yy_last_accepting_state);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( yywrap( ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
	} /* end of user's declarations */
} /* end of yylex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (void)
{
    	register char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	register char *source = (yytext_ptr);
	register int number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr)) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			yy_size_t num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER_LVALUE;

			int yy_c_buf_p_offset =
				(int) ((yy_c_buf_p) - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				yy_size_t new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yyrealloc((void *) b->yy_ch_buf,b->yy_buf_size + 2  );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			(yy_c_buf_p) = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart(yyin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((yy_size_t) ((yy_n_chars) + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		yy_size_t new_size = (yy_n_chars) + number_to_move + ((yy_n_chars) >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) yyrealloc((void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf,new_size  );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
	}

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (void)
{
	register yy_state_type yy_current_state;
	register char *yy_cp;
    
	yy_current_state = (yy_start);

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 2);
		if ( yy_accept[yy_current_state] )
			{
			(yy_last_accepting_state) = yy_current_state;
			(yy_last_accepting_cpos) = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 368 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state )
{
	register int yy_is_jam;
    	register char *yy_cp = (yy_c_buf_p);

	register YY_CHAR yy_c = 2;
	if ( yy_accept[yy_current_state] )
		{
		(yy_last_accepting_state) = yy_current_state;
		(yy_last_accepting_cpos) = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 368 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 367);

		return yy_is_jam ? 0 : yy_current_state;
}

    static void yyunput (int c, register char * yy_bp )
{
	register char *yy_cp;
    
    yy_cp = (yy_c_buf_p);

	/* undo effects of setting up yytext */
	*yy_cp = (yy_hold_char);

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register yy_size_t number_to_move = (yy_n_chars) + 2;
		register char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		register char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

    if ( c == '\n' ){
        --yylineno;
    }

	(yytext_ptr) = yy_bp;
	(yy_hold_char) = *yy_cp;
	(yy_c_buf_p) = yy_cp;
}

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (void)
#else
    static int input  (void)
#endif

{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			yy_size_t offset = (yy_c_buf_p) - (yytext_ptr);
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart(yyin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap( ) )
						return EOF;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve yytext */
	(yy_hold_char) = *++(yy_c_buf_p);

	if ( c == '\n' )
		   
    yylineno++;
;

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void yyrestart  (FILE * input_file )
{
    
	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer(yyin,YY_BUF_SIZE );
	}

	yy_init_buffer(YY_CURRENT_BUFFER,input_file );
	yy_load_buffer_state( );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
    void yy_switch_to_buffer  (YY_BUFFER_STATE  new_buffer )
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state( );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

static void yy_load_buffer_state  (void)
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE yy_create_buffer  (FILE * file, int  size )
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) yyalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yyalloc(b->yy_buf_size + 2  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer(b,file );

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * 
 */
    void yy_delete_buffer (YY_BUFFER_STATE  b )
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yyfree((void *) b->yy_ch_buf  );

	yyfree((void *) b  );
}

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
    static void yy_init_buffer  (YY_BUFFER_STATE  b, FILE * file )

{
	int oerrno = errno;
    
	yy_flush_buffer(b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
    void yy_flush_buffer (YY_BUFFER_STATE  b )
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state( );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
void yypush_buffer_state (YY_BUFFER_STATE new_buffer )
{
    	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack();

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state( );
	(yy_did_buffer_switch_on_eof) = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
void yypop_buffer_state (void)
{
    	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state( );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void yyensure_buffer_stack (void)
{
	yy_size_t num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
		num_to_alloc = 1;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );
								  
		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));
				
		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		int grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyrealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * 
 * @return the newly allocated buffer state object. 
 */
YY_BUFFER_STATE yy_scan_buffer  (char * base, yy_size_t  size )
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return 0;

	b = (YY_BUFFER_STATE) yyalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_buffer()" );

	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = 0;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	yy_switch_to_buffer(b  );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to yylex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * 
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       yy_scan_bytes() instead.
 */
YY_BUFFER_STATE yy_scan_string (yyconst char * yystr )
{
    
	return yy_scan_bytes(yystr,strlen(yystr) );
}

/** Setup the input buffer state to scan the given bytes. The next call to yylex() will
 * scan from a @e copy of @a bytes.
 * @param yybytes the byte buffer to scan
 * @param _yybytes_len the number of bytes in the buffer pointed to by @a bytes.
 * 
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_bytes  (yyconst char * yybytes, yy_size_t  _yybytes_len )
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	yy_size_t i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = _yybytes_len + 2;
	buf = (char *) yyalloc(n  );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = yy_scan_buffer(buf,n );
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in yy_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yy_fatal_error (yyconst char* msg )
{
    	(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = (yy_hold_char); \
		(yy_c_buf_p) = yytext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the current line number.
 * 
 */
int yyget_lineno  (void)
{
        
    return yylineno;
}

/** Get the input stream.
 * 
 */
FILE *yyget_in  (void)
{
        return yyin;
}

/** Get the output stream.
 * 
 */
FILE *yyget_out  (void)
{
        return yyout;
}

/** Get the length of the current token.
 * 
 */
yy_size_t yyget_leng  (void)
{
        return yyleng;
}

/** Get the current token.
 * 
 */

char *yyget_text  (void)
{
        return yytext;
}

/** Set the current line number.
 * @param line_number
 * 
 */
void yyset_lineno (int  line_number )
{
    
    yylineno = line_number;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param in_str A readable stream.
 * 
 * @see yy_switch_to_buffer
 */
void yyset_in (FILE *  in_str )
{
        yyin = in_str ;
}

void yyset_out (FILE *  out_str )
{
        yyout = out_str ;
}

int yyget_debug  (void)
{
        return yy_flex_debug;
}

void yyset_debug (int  bdebug )
{
        yy_flex_debug = bdebug ;
}

static int yy_init_globals (void)
{
        /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from yylex_destroy(), so don't allocate here.
     */

    /* We do not touch yylineno unless the option is enabled. */
    yylineno =  1;
    
    (yy_buffer_stack) = 0;
    (yy_buffer_stack_top) = 0;
    (yy_buffer_stack_max) = 0;
    (yy_c_buf_p) = (char *) 0;
    (yy_init) = 0;
    (yy_start) = 0;

/* Defined in main.c */
#ifdef YY_STDINIT
    yyin = stdin;
    yyout = stdout;
#else
    yyin = (FILE *) 0;
    yyout = (FILE *) 0;
#endif

    /* For future reference: Set errno on error, since we are called by
     * yylex_init()
     */
    return 0;
}

/* yylex_destroy is for both reentrant and non-reentrant scanners. */
int yylex_destroy  (void)
{
    
    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		yy_delete_buffer(YY_CURRENT_BUFFER  );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		yypop_buffer_state();
	}

	/* Destroy the stack itself. */
	yyfree((yy_buffer_stack) );
	(yy_buffer_stack) = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * yylex() is called, initialization will occur. */
    yy_init_globals( );

    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n )
{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s )
{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *yyalloc (yy_size_t  size )
{
	return (void *) malloc( size );
}

void *yyrealloc  (void * ptr, yy_size_t  size )
{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
}

void yyfree (void * ptr )
{
	free( (char *) ptr );	/* see yyrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 195 "lexer.l"



